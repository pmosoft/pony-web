{"remainingRequest":"D:\\fframe\\workspace\\pony-web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\fframe\\workspace\\pony-web\\node_modules\\ag-grid-community\\dist\\lib\\filter\\baseFilter.js","dependencies":[{"path":"D:\\fframe\\workspace\\pony-web\\node_modules\\ag-grid-community\\dist\\lib\\filter\\baseFilter.js","mtime":1566387989329},{"path":"D:\\fframe\\workspace\\pony-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1566388048828},{"path":"D:\\fframe\\workspace\\pony-web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1566387884895}],"contextDependencies":[],"result":["/**\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v19.1.4\n * @link http://www.ag-grid.com/\n * @license MIT\n */\n\"use strict\";\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar component_1 = require(\"../widgets/component\");\nvar componentAnnotations_1 = require(\"../widgets/componentAnnotations\");\nvar context_1 = require(\"../context/context\");\nvar gridOptionsWrapper_1 = require(\"../gridOptionsWrapper\");\nvar utils_1 = require(\"../utils\");\nvar FilterConditionType = /*@__PURE__*/ (function (FilterConditionType) {\n    FilterConditionType[FilterConditionType[\"MAIN\"] = 0] = \"MAIN\";\n    FilterConditionType[FilterConditionType[\"CONDITION\"] = 1] = \"CONDITION\";\n    return FilterConditionType;\n})(FilterConditionType = exports.FilterConditionType || (exports.FilterConditionType = {}));\nvar DEFAULT_TRANSLATIONS = {\n    loadingOoo: 'Loading...',\n    equals: 'Equals',\n    notEqual: 'Not equal',\n    lessThan: 'Less than',\n    greaterThan: 'Greater than',\n    inRange: 'In range',\n    lessThanOrEqual: 'Less than or equals',\n    greaterThanOrEqual: 'Greater than or equals',\n    filterOoo: 'Filter...',\n    contains: 'Contains',\n    notContains: 'Not contains',\n    startsWith: 'Starts with',\n    endsWith: 'Ends with',\n    searchOoo: 'Search...',\n    selectAll: 'Select All',\n    applyFilter: 'Apply Filter',\n    clearFilter: 'Clear Filter'\n};\n/**\n * T(ype) The type of this filter. ie in DateFilter T=Date\n * P(arams) The params that this filter can take\n * M(model getModel/setModel) The object that this filter serializes to\n * F Floating filter params\n *\n * Contains common logic to ALL filters.. Translation, apply and clear button\n * get/setModel context wiring....\n */\nvar BaseFilter = /*@__PURE__*/ (function (_super) {\n    __extends(BaseFilter, _super);\n    function BaseFilter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    BaseFilter.prototype.init = function (params) {\n        this.filterParams = params;\n        this.defaultFilter = this.filterParams.defaultOption;\n        if (this.filterParams.filterOptions && !this.defaultFilter) {\n            if (this.filterParams.filterOptions.lastIndexOf(BaseFilter.EQUALS) < 0) {\n                this.defaultFilter = this.filterParams.filterOptions[0];\n            }\n        }\n        this.customInit();\n        this.filter = this.defaultFilter;\n        this.filterCondition = this.defaultFilter;\n        this.clearActive = params.clearButton === true;\n        //Allowing for old param property apply, even though is not advertised through the interface\n        this.applyActive = ((params.applyButton === true) || (params.apply === true));\n        this.newRowsActionKeep = params.newRowsAction === 'keep';\n        this.setTemplate(this.generateTemplate());\n        utils_1._.setVisible(this.eApplyButton, this.applyActive);\n        if (this.applyActive) {\n            this.addDestroyableEventListener(this.eApplyButton, \"click\", this.filterParams.filterChangedCallback);\n        }\n        utils_1._.setVisible(this.eClearButton, this.clearActive);\n        if (this.clearActive) {\n            this.addDestroyableEventListener(this.eClearButton, \"click\", this.onClearButton.bind(this));\n        }\n        var anyButtonVisible = this.applyActive || this.clearActive;\n        utils_1._.setVisible(this.eButtonsPanel, anyButtonVisible);\n        this.instantiate(this.context);\n        this.initialiseFilterBodyUi(FilterConditionType.MAIN);\n        this.refreshFilterBodyUi(FilterConditionType.MAIN);\n    };\n    BaseFilter.prototype.onClearButton = function () {\n        this.setModel(null);\n        this.onFilterChanged();\n    };\n    BaseFilter.prototype.floatingFilter = function (from) {\n        if (from !== '') {\n            var model = this.modelFromFloatingFilter(from);\n            this.setModel(model);\n        }\n        else {\n            this.resetState();\n        }\n        this.onFilterChanged();\n    };\n    BaseFilter.prototype.onNewRowsLoaded = function () {\n        if (!this.newRowsActionKeep) {\n            this.resetState();\n        }\n    };\n    BaseFilter.prototype.getModel = function () {\n        if (this.isFilterActive()) {\n            if (!this.isFilterConditionActive(FilterConditionType.CONDITION)) {\n                return this.serialize(FilterConditionType.MAIN);\n            }\n            else {\n                return {\n                    condition1: this.serialize(FilterConditionType.MAIN),\n                    condition2: this.serialize(FilterConditionType.CONDITION),\n                    operator: this.conditionValue\n                };\n            }\n        }\n        else {\n            return null;\n        }\n    };\n    BaseFilter.prototype.getNullableModel = function () {\n        if (!this.isFilterConditionActive(FilterConditionType.CONDITION)) {\n            return this.serialize(FilterConditionType.MAIN);\n        }\n        else {\n            return {\n                condition1: this.serialize(FilterConditionType.MAIN),\n                condition2: this.serialize(FilterConditionType.CONDITION),\n                operator: this.conditionValue\n            };\n        }\n    };\n    BaseFilter.prototype.setModel = function (model) {\n        if (model) {\n            if (!model.operator) {\n                this.resetState();\n                this.parse(model, FilterConditionType.MAIN);\n            }\n            else {\n                var asCombinedFilter = model;\n                this.parse((asCombinedFilter).condition1, FilterConditionType.MAIN);\n                this.parse((asCombinedFilter).condition2, FilterConditionType.CONDITION);\n                this.conditionValue = asCombinedFilter.operator;\n            }\n        }\n        else {\n            this.resetState();\n        }\n        this.redrawCondition();\n        this.refreshFilterBodyUi(FilterConditionType.MAIN);\n        this.refreshFilterBodyUi(FilterConditionType.CONDITION);\n    };\n    BaseFilter.prototype.doOnFilterChanged = function (applyNow) {\n        if (applyNow === void 0) {\n            applyNow = false;\n        }\n        this.filterParams.filterModifiedCallback();\n        var requiresApplyAndIsApplying = this.applyActive && applyNow;\n        var notRequiresApply = !this.applyActive;\n        var shouldFilter = notRequiresApply || requiresApplyAndIsApplying;\n        if (shouldFilter) {\n            this.filterParams.filterChangedCallback();\n        }\n        this.refreshFilterBodyUi(FilterConditionType.MAIN);\n        this.refreshFilterBodyUi(FilterConditionType.CONDITION);\n        return shouldFilter;\n    };\n    BaseFilter.prototype.onFilterChanged = function (applyNow) {\n        if (applyNow === void 0) {\n            applyNow = false;\n        }\n        this.doOnFilterChanged(applyNow);\n        this.redrawCondition();\n        this.refreshFilterBodyUi(FilterConditionType.MAIN);\n        this.refreshFilterBodyUi(FilterConditionType.CONDITION);\n    };\n    BaseFilter.prototype.redrawCondition = function () {\n        var _this = this;\n        var filterCondition = this.eFilterBodyWrapper.querySelector('.ag-filter-condition');\n        if (!filterCondition && this.isFilterActive() && this.acceptsBooleanLogic()) {\n            this.eConditionWrapper = utils_1._.loadTemplate(this.createConditionTemplate(FilterConditionType.CONDITION));\n            this.eFilterBodyWrapper.appendChild(this.eConditionWrapper);\n            this.wireQuerySelectors();\n            var _a = this.refreshOperatorUi(), andButton = _a.andButton, orButton = _a.orButton;\n            this.addDestroyableEventListener(andButton, 'change', function () {\n                _this.conditionValue = 'AND';\n                _this.onFilterChanged();\n            });\n            this.addDestroyableEventListener(orButton, 'change', function () {\n                _this.conditionValue = 'OR';\n                _this.onFilterChanged();\n            });\n            this.initialiseFilterBodyUi(FilterConditionType.CONDITION);\n        }\n        else if (filterCondition && !this.isFilterActive()) {\n            this.eFilterBodyWrapper.removeChild(this.eConditionWrapper);\n            this.eConditionWrapper = null;\n        }\n        else {\n            this.refreshFilterBodyUi(FilterConditionType.CONDITION);\n            if (this.eConditionWrapper) {\n                this.refreshOperatorUi();\n            }\n        }\n    };\n    BaseFilter.prototype.refreshOperatorUi = function () {\n        var andButton = this.eConditionWrapper.querySelector('.and');\n        var orButton = this.eConditionWrapper.querySelector('.or');\n        this.conditionValue = this.conditionValue == null ? 'AND' : this.conditionValue;\n        andButton.checked = this.conditionValue === 'AND';\n        orButton.checked = this.conditionValue === 'OR';\n        return { andButton: andButton, orButton: orButton };\n    };\n    BaseFilter.prototype.onFloatingFilterChanged = function (change) {\n        //It has to be of the type FloatingFilterWithApplyChange if it gets here\n        var casted = change;\n        if (casted == null) {\n            this.setModel(null);\n        }\n        else if (!this.isFilterConditionActive(FilterConditionType.CONDITION)) {\n            this.setModel(casted ? casted.model : null);\n        }\n        else {\n            var combinedFilter = {\n                condition1: casted.model,\n                condition2: this.serialize(FilterConditionType.CONDITION),\n                operator: this.conditionValue\n            };\n            this.setModel(combinedFilter);\n        }\n        return this.doOnFilterChanged(casted ? casted.apply : false);\n    };\n    BaseFilter.prototype.generateFilterHeader = function (type) {\n        return '';\n    };\n    BaseFilter.prototype.generateTemplate = function () {\n        var translate = this.translate.bind(this);\n        var mainConditionBody = this.createConditionBody(FilterConditionType.MAIN);\n        var bodyWithBooleanLogic = !this.acceptsBooleanLogic() ?\n            mainConditionBody :\n            this.wrapCondition(mainConditionBody);\n        return \"<div>\\n                    <div class='ag-filter-body-wrapper'>\" + bodyWithBooleanLogic + \"</div>\\n                    <div class=\\\"ag-filter-apply-panel\\\" id=\\\"applyPanel\\\">\\n                        <button type=\\\"button\\\" id=\\\"clearButton\\\">\" + translate('clearFilter') + \"</button>\\n                        <button type=\\\"button\\\" id=\\\"applyButton\\\">\" + translate('applyFilter') + \"</button>\\n                    </div>\\n                </div>\";\n    };\n    BaseFilter.prototype.acceptsBooleanLogic = function () {\n        return false;\n    };\n    BaseFilter.prototype.wrapCondition = function (mainCondition) {\n        if (!this.isFilterActive())\n            return mainCondition;\n        return \"\" + mainCondition + this.createConditionTemplate(FilterConditionType.CONDITION);\n    };\n    BaseFilter.prototype.createConditionTemplate = function (type) {\n        return \"<div class=\\\"ag-filter-condition\\\">\\n            <input id=\\\"andId\\\" type=\\\"radio\\\" class=\\\"and\\\" name=\\\"booleanLogic\\\" value=\\\"AND\\\" checked=\\\"checked\\\" /><label style=\\\"display: inline\\\" for=\\\"andId\\\">AND</label>\\n            <input id=\\\"orId\\\" type=\\\"radio\\\" class=\\\"or\\\" name=\\\"booleanLogic\\\" value=\\\"OR\\\" /><label style=\\\"display: inline\\\" for=\\\"orId\\\">OR</label>\\n            <div>\" + this.createConditionBody(type) + \"</div>\\n        </div>\";\n    };\n    BaseFilter.prototype.createConditionBody = function (type) {\n        var body = this.bodyTemplate(type);\n        return this.generateFilterHeader(type) + body;\n    };\n    BaseFilter.prototype.translate = function (toTranslate) {\n        var translate = this.gridOptionsWrapper.getLocaleTextFunc();\n        return translate(toTranslate, DEFAULT_TRANSLATIONS[toTranslate]);\n    };\n    BaseFilter.prototype.getDebounceMs = function (filterParams) {\n        if (filterParams.applyButton && filterParams.debounceMs) {\n            console.warn('ag-Grid: debounceMs is ignored when applyButton = true');\n            return 0;\n        }\n        return filterParams.debounceMs != null ? filterParams.debounceMs : 500;\n    };\n    BaseFilter.EQUALS = 'equals';\n    BaseFilter.NOT_EQUAL = 'notEqual';\n    BaseFilter.LESS_THAN = 'lessThan';\n    BaseFilter.LESS_THAN_OR_EQUAL = 'lessThanOrEqual';\n    BaseFilter.GREATER_THAN = 'greaterThan';\n    BaseFilter.GREATER_THAN_OR_EQUAL = 'greaterThanOrEqual';\n    BaseFilter.IN_RANGE = 'inRange';\n    BaseFilter.CONTAINS = 'contains'; //1;\n    BaseFilter.NOT_CONTAINS = 'notContains'; //1;\n    BaseFilter.STARTS_WITH = 'startsWith'; //4;\n    BaseFilter.ENDS_WITH = 'endsWith'; //5;\n    __decorate([\n        componentAnnotations_1.QuerySelector('#applyPanel'),\n        __metadata(\"design:type\", HTMLElement)\n    ], BaseFilter.prototype, \"eButtonsPanel\", void 0);\n    __decorate([\n        componentAnnotations_1.QuerySelector('.ag-filter-body-wrapper'),\n        __metadata(\"design:type\", HTMLElement)\n    ], BaseFilter.prototype, \"eFilterBodyWrapper\", void 0);\n    __decorate([\n        componentAnnotations_1.QuerySelector('#applyButton'),\n        __metadata(\"design:type\", HTMLElement)\n    ], BaseFilter.prototype, \"eApplyButton\", void 0);\n    __decorate([\n        componentAnnotations_1.QuerySelector('#clearButton'),\n        __metadata(\"design:type\", HTMLElement)\n    ], BaseFilter.prototype, \"eClearButton\", void 0);\n    __decorate([\n        context_1.Autowired('context'),\n        __metadata(\"design:type\", context_1.Context)\n    ], BaseFilter.prototype, \"context\", void 0);\n    __decorate([\n        context_1.Autowired('gridOptionsWrapper'),\n        __metadata(\"design:type\", gridOptionsWrapper_1.GridOptionsWrapper)\n    ], BaseFilter.prototype, \"gridOptionsWrapper\", void 0);\n    return BaseFilter;\n}(component_1.Component));\nexports.BaseFilter = BaseFilter;\n/**\n * Every filter with a dropdown where the user can specify a comparing type against the filter values\n */\nvar ComparableBaseFilter = /*@__PURE__*/ (function (_super) {\n    __extends(ComparableBaseFilter, _super);\n    function ComparableBaseFilter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ComparableBaseFilter.prototype.doesFilterPass = function (params) {\n        var mainFilterResult = this.individualFilterPasses(params, FilterConditionType.MAIN);\n        if (this.eTypeConditionSelector == null) {\n            return mainFilterResult;\n        }\n        var auxFilterResult = this.individualFilterPasses(params, FilterConditionType.CONDITION);\n        return this.conditionValue === 'AND' ? mainFilterResult && auxFilterResult : mainFilterResult || auxFilterResult;\n    };\n    ComparableBaseFilter.prototype.init = function (params) {\n        _super.prototype.init.call(this, params);\n        this.suppressAndOrCondition = params.suppressAndOrCondition;\n    };\n    ComparableBaseFilter.prototype.customInit = function () {\n        if (!this.defaultFilter) {\n            this.defaultFilter = this.getDefaultType();\n        }\n    };\n    ComparableBaseFilter.prototype.acceptsBooleanLogic = function () {\n        return this.suppressAndOrCondition !== true;\n    };\n    ComparableBaseFilter.prototype.generateFilterHeader = function (type) {\n        var _this = this;\n        var defaultFilterTypes = this.getApplicableFilterTypes();\n        var restrictedFilterTypes = this.filterParams.filterOptions;\n        var actualFilterTypes = restrictedFilterTypes ? restrictedFilterTypes : defaultFilterTypes;\n        var optionsHtml = actualFilterTypes.map(function (filterType) {\n            var localeFilterName = _this.translate(filterType);\n            return \"<option value=\\\"\" + filterType + \"\\\">\" + localeFilterName + \"</option>\";\n        });\n        var readOnly = optionsHtml.length == 1 ? 'disabled' : '';\n        var id = type == FilterConditionType.MAIN ? 'filterType' : 'filterConditionType';\n        return optionsHtml.length <= 0 ?\n            '' :\n            \"<div>\\n                <select class=\\\"ag-filter-select\\\" id=\\\"\" + id + \"\\\" \" + readOnly + \">\\n                    \" + optionsHtml.join('') + \"\\n                </select>\\n            </div>\";\n    };\n    ComparableBaseFilter.prototype.initialiseFilterBodyUi = function (type) {\n        var _this = this;\n        if (type === FilterConditionType.MAIN) {\n            this.setFilterType(this.filter, type);\n            this.addDestroyableEventListener(this.eTypeSelector, \"change\", function () { return _this.onFilterTypeChanged(type); });\n        }\n        else {\n            this.setFilterType(this.filterCondition, type);\n            this.addDestroyableEventListener(this.eTypeConditionSelector, \"change\", function () { return _this.onFilterTypeChanged(type); });\n        }\n    };\n    ComparableBaseFilter.prototype.onFilterTypeChanged = function (type) {\n        if (type === FilterConditionType.MAIN) {\n            this.filter = this.eTypeSelector.value;\n        }\n        else {\n            this.filterCondition = this.eTypeConditionSelector.value;\n        }\n        this.refreshFilterBodyUi(type);\n        // we check if filter is active, so that if user changes the type (eg from 'less than' to 'equals'),\n        // well this doesn't matter if the user has no value in the text field, so don't fire 'onFilterChanged'.\n        // this means we don't refresh the grid when the type changes if no value is present.\n        if (this.isFilterActive()) {\n            this.onFilterChanged();\n        }\n    };\n    ComparableBaseFilter.prototype.isFilterActive = function () {\n        var rawFilterValues = this.filterValues(FilterConditionType.MAIN);\n        if (rawFilterValues && this.filter === BaseFilter.IN_RANGE) {\n            var filterValueArray = rawFilterValues;\n            return filterValueArray[0] != null && filterValueArray[1] != null;\n        }\n        else {\n            return rawFilterValues != null;\n        }\n    };\n    ComparableBaseFilter.prototype.setFilterType = function (filterType, type) {\n        if (type === FilterConditionType.MAIN) {\n            this.filter = filterType;\n            if (!this.eTypeSelector)\n                return;\n            this.eTypeSelector.value = filterType;\n        }\n        else {\n            this.filterCondition = filterType;\n            if (!this.eTypeConditionSelector)\n                return;\n            this.eTypeConditionSelector.value = filterType;\n        }\n    };\n    ComparableBaseFilter.prototype.isFilterConditionActive = function (type) {\n        return this.filterValues(type) != null;\n    };\n    __decorate([\n        componentAnnotations_1.QuerySelector('#filterType'),\n        __metadata(\"design:type\", HTMLSelectElement)\n    ], ComparableBaseFilter.prototype, \"eTypeSelector\", void 0);\n    __decorate([\n        componentAnnotations_1.QuerySelector('#filterConditionType'),\n        __metadata(\"design:type\", HTMLSelectElement)\n    ], ComparableBaseFilter.prototype, \"eTypeConditionSelector\", void 0);\n    return ComparableBaseFilter;\n}(BaseFilter));\nexports.ComparableBaseFilter = ComparableBaseFilter;\n/**\n * Comparable filter with scalar underlying values (ie numbers and dates. Strings are not scalar so have to extend\n * ComparableBaseFilter)\n */\nvar ScalarBaseFilter = /*@__PURE__*/ (function (_super) {\n    __extends(ScalarBaseFilter, _super);\n    function ScalarBaseFilter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ScalarBaseFilter.prototype.nullComparator = function (type) {\n        var _this = this;\n        return function (filterValue, gridValue) {\n            if (gridValue == null) {\n                var nullValue = _this.translateNull(type);\n                if (_this.filter === BaseFilter.EQUALS) {\n                    return nullValue ? 0 : 1;\n                }\n                if (_this.filter === BaseFilter.GREATER_THAN) {\n                    return nullValue ? 1 : -1;\n                }\n                if (_this.filter === BaseFilter.GREATER_THAN_OR_EQUAL) {\n                    return nullValue ? 1 : -1;\n                }\n                if (_this.filter === BaseFilter.LESS_THAN_OR_EQUAL) {\n                    return nullValue ? -1 : 1;\n                }\n                if (_this.filter === BaseFilter.LESS_THAN) {\n                    return nullValue ? -1 : 1;\n                }\n                if (_this.filter === BaseFilter.NOT_EQUAL) {\n                    return nullValue ? 1 : 0;\n                }\n            }\n            var actualComparator = _this.comparator();\n            return actualComparator(filterValue, gridValue);\n        };\n    };\n    ScalarBaseFilter.prototype.getDefaultType = function () {\n        return BaseFilter.EQUALS;\n    };\n    ScalarBaseFilter.prototype.translateNull = function (type) {\n        var reducedType = type.indexOf('greater') > -1 ? 'greaterThan' :\n            type.indexOf('lessThan') > -1 ? 'lessThan' :\n                'equals';\n        if (this.filterParams.nullComparator && this.filterParams.nullComparator[reducedType]) {\n            return this.filterParams.nullComparator[reducedType];\n        }\n        return ScalarBaseFilter.DEFAULT_NULL_COMPARATOR[reducedType];\n    };\n    ScalarBaseFilter.prototype.individualFilterPasses = function (params, type) {\n        return this.doIndividualFilterPasses(params, type, type === FilterConditionType.MAIN ? this.filter : this.filterCondition);\n    };\n    ScalarBaseFilter.prototype.doIndividualFilterPasses = function (params, type, filter) {\n        var value = this.filterParams.valueGetter(params.node);\n        var comparator = this.nullComparator(filter);\n        var rawFilterValues = this.filterValues(type);\n        var from = Array.isArray(rawFilterValues) ? rawFilterValues[0] : rawFilterValues;\n        if (from == null) {\n            return type === FilterConditionType.MAIN ? true : this.conditionValue === 'AND';\n        }\n        var compareResult = comparator(from, value);\n        if (filter === BaseFilter.EQUALS) {\n            return compareResult === 0;\n        }\n        if (filter === BaseFilter.GREATER_THAN) {\n            return compareResult > 0;\n        }\n        if (filter === BaseFilter.GREATER_THAN_OR_EQUAL) {\n            return compareResult >= 0;\n        }\n        if (filter === BaseFilter.LESS_THAN_OR_EQUAL) {\n            return compareResult <= 0;\n        }\n        if (filter === BaseFilter.LESS_THAN) {\n            return compareResult < 0;\n        }\n        if (filter === BaseFilter.NOT_EQUAL) {\n            return compareResult != 0;\n        }\n        //From now on the type is a range and rawFilterValues must be an array!\n        var compareToResult = comparator(rawFilterValues[1], value);\n        if (filter === BaseFilter.IN_RANGE) {\n            if (!this.filterParams.inRangeInclusive) {\n                return compareResult > 0 && compareToResult < 0;\n            }\n            else {\n                return compareResult >= 0 && compareToResult <= 0;\n            }\n        }\n        throw new Error('Unexpected type of filter!: ' + filter);\n    };\n    ScalarBaseFilter.DEFAULT_NULL_COMPARATOR = {\n        equals: false,\n        lessThan: false,\n        greaterThan: false\n    };\n    return ScalarBaseFilter;\n}(ComparableBaseFilter));\nexports.ScalarBaseFilter = ScalarBaseFilter;\n",null]}