{"remainingRequest":"D:\\fframe\\workspace\\pony-web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\fframe\\workspace\\pony-web\\node_modules\\ag-grid-community\\dist\\lib\\rendering\\features\\setLeftFeature.js","dependencies":[{"path":"D:\\fframe\\workspace\\pony-web\\node_modules\\ag-grid-community\\dist\\lib\\rendering\\features\\setLeftFeature.js","mtime":1566388000000},{"path":"D:\\fframe\\workspace\\pony-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1566388048000},{"path":"D:\\fframe\\workspace\\pony-web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1566387884000}],"contextDependencies":[],"result":["/**\r\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\r\n * @version v19.1.4\r\n * @link http://www.ag-grid.com/\r\n * @license MIT\r\n */\r\n\"use strict\";\r\nvar __extends = /*@__PURE__*/ require(\"tslib\").__extends;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../../utils\");\r\nvar column_1 = require(\"../../entities/column\");\r\nvar beanStub_1 = require(\"../../context/beanStub\");\r\nvar constants_1 = require(\"../../constants\");\r\nvar SetLeftFeature = /*@__PURE__*/ (function (_super) {\r\n    __extends(SetLeftFeature, _super);\r\n    function SetLeftFeature(columnOrGroup, eCell, beans, colsSpanning) {\r\n        var _this = _super.call(this) || this;\r\n        _this.columnOrGroup = columnOrGroup;\r\n        _this.eCell = eCell;\r\n        _this.colsSpanning = colsSpanning;\r\n        _this.beans = beans;\r\n        _this.printLayout = beans.gridOptionsWrapper.getDomLayout() === constants_1.Constants.DOM_LAYOUT_PRINT;\r\n        return _this;\r\n    }\r\n    SetLeftFeature.prototype.setColsSpanning = function (colsSpanning) {\r\n        this.colsSpanning = colsSpanning;\r\n        this.onLeftChanged();\r\n    };\r\n    SetLeftFeature.prototype.getColumnOrGroup = function () {\r\n        if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {\r\n            return this.colsSpanning[this.colsSpanning.length - 1];\r\n        }\r\n        else {\r\n            return this.columnOrGroup;\r\n        }\r\n    };\r\n    SetLeftFeature.prototype.init = function () {\r\n        this.addDestroyableEventListener(this.columnOrGroup, column_1.Column.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));\r\n        this.setLeftFirstTime();\r\n    };\r\n    SetLeftFeature.prototype.setLeftFirstTime = function () {\r\n        var suppressMoveAnimation = this.beans.gridOptionsWrapper.isSuppressColumnMoveAnimation();\r\n        var oldLeftExists = utils_1.Utils.exists(this.columnOrGroup.getOldLeft());\r\n        var animateColumnMove = this.beans.columnAnimationService.isActive() && oldLeftExists && !suppressMoveAnimation;\r\n        if (animateColumnMove) {\r\n            this.animateInLeft();\r\n        }\r\n        else {\r\n            this.onLeftChanged();\r\n        }\r\n    };\r\n    SetLeftFeature.prototype.animateInLeft = function () {\r\n        var _this = this;\r\n        var left = this.getColumnOrGroup().getLeft();\r\n        var oldLeft = this.getColumnOrGroup().getOldLeft();\r\n        this.setLeft(oldLeft);\r\n        // we must keep track of the left we want to set to, as this would otherwise lead to a race\r\n        // condition, if the user changed the left value many times in one VM turn, then we want to make\r\n        // make sure the actualLeft we set in the timeout below (in the next VM turn) is the correct left\r\n        // position. eg if user changes column position twice, then setLeft() below executes twice in next\r\n        // VM turn, but only one (the correct one) should get applied.\r\n        this.actualLeft = left;\r\n        this.beans.columnAnimationService.executeNextVMTurn(function () {\r\n            // test this left value is the latest one to be applied, and if not, do nothing\r\n            if (_this.actualLeft === left) {\r\n                _this.setLeft(left);\r\n            }\r\n        });\r\n    };\r\n    SetLeftFeature.prototype.onLeftChanged = function () {\r\n        var colOrGroup = this.getColumnOrGroup();\r\n        var left = colOrGroup.getLeft();\r\n        this.actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left);\r\n        this.setLeft(this.actualLeft);\r\n    };\r\n    SetLeftFeature.prototype.modifyLeftForPrintLayout = function (colOrGroup, leftPosition) {\r\n        if (!this.printLayout) {\r\n            return leftPosition;\r\n        }\r\n        if (colOrGroup.getPinned() === column_1.Column.PINNED_LEFT) {\r\n            return leftPosition;\r\n        }\r\n        else if (colOrGroup.getPinned() === column_1.Column.PINNED_RIGHT) {\r\n            var leftWidth = this.beans.columnController.getPinnedLeftContainerWidth();\r\n            var bodyWidth = this.beans.columnController.getBodyContainerWidth();\r\n            return leftWidth + bodyWidth + leftPosition;\r\n        }\r\n        else {\r\n            // is in body\r\n            var leftWidth = this.beans.columnController.getPinnedLeftContainerWidth();\r\n            return leftWidth + leftPosition;\r\n        }\r\n    };\r\n    SetLeftFeature.prototype.setLeft = function (value) {\r\n        // if the value is null, then that means the column is no longer\r\n        // displayed. there is logic in the rendering to fade these columns\r\n        // out, so we don't try and change their left positions.\r\n        if (utils_1.Utils.exists(value)) {\r\n            this.eCell.style.left = value + 'px';\r\n        }\r\n    };\r\n    return SetLeftFeature;\r\n}(beanStub_1.BeanStub));\r\nexports.SetLeftFeature = SetLeftFeature;\r\n",null]}