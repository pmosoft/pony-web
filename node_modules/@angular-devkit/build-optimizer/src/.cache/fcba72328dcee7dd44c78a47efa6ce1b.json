{"remainingRequest":"D:\\fframe\\workspace\\pony-web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\fframe\\workspace\\pony-web\\node_modules\\ag-grid-community\\dist\\lib\\layout\\tabbedLayout.js","dependencies":[{"path":"D:\\fframe\\workspace\\pony-web\\node_modules\\ag-grid-community\\dist\\lib\\layout\\tabbedLayout.js","mtime":499162500000},{"path":"D:\\fframe\\workspace\\pony-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527391761479},{"path":"D:\\fframe\\workspace\\pony-web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527226929000}],"contextDependencies":[],"result":["/**\r\n * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\r\n * @version v19.1.4\r\n * @link http://www.ag-grid.com/\r\n * @license MIT\r\n */\r\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"../utils\");\r\nvar TabbedLayout = /*@__PURE__*/ (function () {\r\n    function TabbedLayout(params) {\r\n        var _this = this;\r\n        this.items = [];\r\n        this.params = params;\r\n        this.eGui = document.createElement('div');\r\n        this.eGui.innerHTML = TabbedLayout.TEMPLATE;\r\n        this.eHeader = this.eGui.querySelector('[ref=\"tabHeader\"]');\r\n        this.eBody = this.eGui.querySelector('[ref=\"tabBody\"]');\r\n        utils_1.Utils.addCssClass(this.eGui, params.cssClass);\r\n        if (params.items) {\r\n            params.items.forEach(function (item) { return _this.addItem(item); });\r\n        }\r\n    }\r\n    TabbedLayout.prototype.setAfterAttachedParams = function (params) {\r\n        this.afterAttachedParams = params;\r\n    };\r\n    TabbedLayout.prototype.getMinDimensions = function () {\r\n        var eDummyContainer = this.eGui.cloneNode(true);\r\n        var eDummyBody = eDummyContainer.querySelector('[ref=\"tabBody\"]');\r\n        // position fixed, so it isn't restricted to the boundaries of the parent\r\n        eDummyContainer.style.position = 'fixed';\r\n        // we put the dummy into the body container, so it will inherit all the\r\n        // css styles that the real cells are inheriting\r\n        this.eGui.appendChild(eDummyContainer);\r\n        var minWidth = 0;\r\n        var minHeight = 0;\r\n        this.items.forEach(function (itemWrapper) {\r\n            utils_1.Utils.removeAllChildren(eDummyBody);\r\n            var eClone = itemWrapper.tabbedItem.bodyPromise.resolveNow(null, function (body) { return body.cloneNode(true); });\r\n            if (eClone == null) {\r\n                return;\r\n            }\r\n            eDummyBody.appendChild(eClone);\r\n            if (minWidth < eDummyContainer.offsetWidth) {\r\n                minWidth = eDummyContainer.offsetWidth;\r\n            }\r\n            if (minHeight < eDummyContainer.offsetHeight) {\r\n                minHeight = eDummyContainer.offsetHeight;\r\n            }\r\n        });\r\n        // finally check the parent tabs are no wider, as if they\r\n        // are, then these are the min width and not the child tabs\r\n        // if (minWidth<this.eGui.offsetWidth) {\r\n        //     minWidth = this.eGui.offsetWidth;\r\n        // }\r\n        this.eGui.removeChild(eDummyContainer);\r\n        return { height: minHeight, width: minWidth };\r\n    };\r\n    TabbedLayout.prototype.showFirstItem = function () {\r\n        if (this.items.length > 0) {\r\n            this.showItemWrapper(this.items[0]);\r\n        }\r\n    };\r\n    TabbedLayout.prototype.addItem = function (item) {\r\n        var eHeaderButton = document.createElement('span');\r\n        eHeaderButton.appendChild(item.title);\r\n        utils_1.Utils.addCssClass(eHeaderButton, 'ag-tab');\r\n        this.eHeader.appendChild(eHeaderButton);\r\n        var wrapper = {\r\n            tabbedItem: item,\r\n            eHeaderButton: eHeaderButton\r\n        };\r\n        this.items.push(wrapper);\r\n        eHeaderButton.addEventListener('click', this.showItemWrapper.bind(this, wrapper));\r\n    };\r\n    TabbedLayout.prototype.showItem = function (tabbedItem) {\r\n        var itemWrapper = utils_1.Utils.find(this.items, function (wrapper) {\r\n            return wrapper.tabbedItem === tabbedItem;\r\n        });\r\n        if (itemWrapper) {\r\n            this.showItemWrapper(itemWrapper);\r\n        }\r\n    };\r\n    TabbedLayout.prototype.showItemWrapper = function (wrapper) {\r\n        var _this = this;\r\n        if (this.params.onItemClicked) {\r\n            this.params.onItemClicked({ item: wrapper.tabbedItem });\r\n        }\r\n        if (this.activeItem === wrapper) {\r\n            utils_1.Utils.callIfPresent(this.params.onActiveItemClicked);\r\n            return;\r\n        }\r\n        utils_1.Utils.removeAllChildren(this.eBody);\r\n        wrapper.tabbedItem.bodyPromise.then(function (body) {\r\n            _this.eBody.appendChild(body);\r\n        });\r\n        if (this.activeItem) {\r\n            utils_1.Utils.removeCssClass(this.activeItem.eHeaderButton, 'ag-tab-selected');\r\n        }\r\n        utils_1.Utils.addCssClass(wrapper.eHeaderButton, 'ag-tab-selected');\r\n        this.activeItem = wrapper;\r\n        if (wrapper.tabbedItem.afterAttachedCallback) {\r\n            wrapper.tabbedItem.afterAttachedCallback(this.afterAttachedParams);\r\n        }\r\n    };\r\n    TabbedLayout.prototype.getGui = function () {\r\n        return this.eGui;\r\n    };\r\n    TabbedLayout.TEMPLATE = '<div>' +\r\n        '<div ref=\"tabHeader\" class=\"ag-tab-header\"></div>' +\r\n        '<div ref=\"tabBody\" class=\"ag-tab-body\"></div>' +\r\n        '</div>';\r\n    return TabbedLayout;\r\n}());\r\nexports.TabbedLayout = TabbedLayout;\r\n",null]}